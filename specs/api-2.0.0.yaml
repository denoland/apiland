---
openapi: 3.0.0
info:
  title: Deno Land APIs
  description: Describes the API available on api.deno.land.
  contact:
    url: https://deno.land/
  version: 2.0.0
  license:
    name: MIT
    url: https://github.com/denoland/apiland/LICENSE.md
servers:
  - url: https://apiland.deno.dev
    description: The latest deployment of this repository on Deploy.
tags:
- name: registry
  description: Information about the module registry.
- name: metrics
  description: Metric information.
- name: webhooks
  description: Endpoints used for integration.
- name: infrastructure
  description: APIs that relate to internal infrastructure.
paths:
  /v2/metrics/modules:
    get:
      tags:
      - registry
      - metrics
      summary: Lists module metrics.
      description: Provides a list of metrics for modules.
      operationId: getModulesMetrics
      parameters:
        - name: limit
          in: query
          description: The number of items to limit the response to.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: >
            The page number to use as an offset for results. It is a 1 based
            index. Must be used in conjunction with `limit`.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: A JSON array of registered modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModuleMetricList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
                schema:
                  type: string
        "404":
          description: >
            Not found - no resources for the given query were found. Try
            changing the query parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/metrics/modules/{module}:
      get:
        tags:
          - registry
          - metrics
        summary: Get metrics about a module.
        description: >
          Returns an object which provides metrics about a module across
          popularity, quality, and maintenance.
        operationId: getModuleMetrics
        parameters:
          - name: module
            in: path
            required: true
            schema:
              $ref: "#/components/schemas/ModuleName"
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ModuleMetrics"
          "404":
            description: Not found - the requested resource was not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/HttpError"
              text/html:
                schema:
                  type: string
  /v2/modules:
    get:
      tags:
      - registry
      summary: Lists registered modules.
      description: Provides a list of registered modules.
      operationId: getModules
      parameters:
        - name: limit
          in: query
          description: The number of items to limit the response to.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: >
            The page number to use as an offset for results. It is a 1 based
            index. Must be used in conjunction with `limit`.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: A JSON array of registered modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModuleList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
                schema:
                  type: string
        "404":
          description: >
            Not found - no resources for the given query were found. Try
            changing the query parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}:
    get:
      tags:
        - registry
      summary: Gets information about a module.
      description: >
        This resource represents an individual registered module repository.
      operationId: getModule
      parameters:
        - name: module
          in: path
          description: Module name
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}:
    get:
      tags:
        - registry
      summary: Get information about a module version.
      description: >
        Returns information about a specific version of a module available in
        the registry.
      operationId: getModuleVersion
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModuleVersion"
        "302":
          description: >
            Found - The latest version has been found. This is sent when 
            `__latest__` is used as the version.
          headers:
            Location:
              schema:
                type: string
            X-Deno-Module:
              schema:
                $ref: "#/components/schemas/ModuleName"
            X-Deno-Latest-Version:
              schema:
                type: string
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/doc:
    post:
      tags:
        - registry
      summary: Get doc nodes for a module.
      description: >
        Get doc nodes for a module filtered by the array of paths provided in
        the request body.
      operationId: getModuleVersionDocs
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
      requestBody:
        description: An array of paths to lookup.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["/mod.ts", "/lib/mod.ts"]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocNodeByEntry"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/doc/{path}:
    get:
      tags:
        - registry
      summary: Get doc nodes for a file.
      description: >
        Get doc nodes for a file.
      operationId: getModuleVersionDocByPath
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: mod.ts
        - name: kind
          in: query
          description: >
            Filter the results based on DocNode kind.
          schema:
            $ref: "#/components/schemas/DocNodeKind"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocNode"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/index:
    get:
      tags:
        - registry
      summary: Get an index map of modules.
      description: >
        Responds with an object containing an `index` and `docs` properties. 
        The `index` is a map of folders and the modules inside those folders.
        Items marked as private or obvious tests are filtered out. The `docs` is
        any module level JSDoc available for the module.
      operationId: getModuleVersionIndex
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexDoc"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/index/{path}:
    get:
      tags:
        - registry
      summary: Get a sub index map of modules.
      description: >
        Responds with an object containing an `index` and `docs` properties for
        a given path. The `index` is a map of folders and the modules inside
        those folders. Items marked as private or obvious tests are filtered
        out. The `docs` is any module level JSDoc available for the module.
      operationId: getModuleVersionIndexByPath
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: src
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexDoc"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/legacy_index:
    get:
      tags:
        - registry
      summary: Get an index of the module in the legacy format.
      operationId: getModuleVersionLegacyIndex
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyIndex"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/legacy_index/{path}:
    get:
      tags:
        - registry
      summary: Get a sub index of the module in the legacy format.
      operationId: getModuleVersionLegacyIndexByPath
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: src
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyIndex"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/raw/{path}:
    get:
      tags:
        - registry
      summary: Get raw content for a file.
      operationId: getModuleVersionPathRaw
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: mod.ts
      responses:
        "200":
          description: Successful operation
          content:
            application/*:
              schema:
                type: string
                format: binary
            text/*:
              schema:
                type: string
                format: binary
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/page:
    get:
      tags:
        - registry
      summary: Get information about a module to render the root page.
      description: >
        Responds with all the information needed to render a root page of a
        module.
      operationId: getPageInfo
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: "0.148.0"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocPage"
        "400":
          description: Bad Request - the request was malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
        "301":
          description: Moved - This page has a different location
          headers:
            Location:
              schema:
                type: string
            X-Deno-Module:
              schema:
                $ref: "#/components/schemas/ModuleName"
            X-Deno-Version:
              schema:
                type: string
            X-Deno-Path:
              schema:
                type: string
        "302":
          description: >
            Found - The latest version has been found. This is sent when 
            `__latest__` is used as the version.
          headers:
            Location:
              schema:
                type: string
            X-Deno-Module:
              schema:
                $ref: "#/components/schemas/ModuleName"
            X-Deno-Latest-Version:
              schema:
                type: string
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/page/{path}:
    get:
      tags:
        - registry
      summary: Get information about a module to render the root page.
      description: >
        Responds with all the information needed to render a root page of a
        module.
      operationId: getPagePathInfo
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: "0.148.0"
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: "mod.ts"
        - name: symbol
          in: query
          description: >
            The specific symbol to search for. If searching for a symbol on non-
            module path, a Bad Request will be returned. To search for a
            namespaced symbol, deliminate using the `.` (e.g.
            `namespace.Value`).
          schema:
            type: string
            example: "AClass"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocPage"
        "400":
          description: Bad Request - the request was malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/symbols:
    get:
      tags:
        - registry
      summary: Get a map of symbols by module.
      description: >
        Responds with an array which contains code modules and exported symbol
        information for each code module in the root path.
      operationId: getModuleSymbols
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolIndex"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /v2/modules/{module}/{version}/symbols/{path}:
    get:
      tags:
        - registry
      summary: Get a map of symbols by module for a subpath.
      description: >
        Responds with an array which contains code modules and exported symbol
        information for each code module in the specified sub-path.
      operationId: getModuleSymbolsPath
      parameters:
        - name: module
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ModuleName"
        - name: version
          in: path
          required: true
          schema:
            type: string
            example: v10.0.1
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: src
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolIndex"
        "404":
          description: Not found - the requested resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /webhook/publish:
    post:
      tags:
        - webhooks
      summary: A module has been published.
      description: >
        A module has been published and apiland should add the module to the
        datastore.
      operationId: postWebhookPublish
      requestBody:
        description: Information about the publish event
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishEvent"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
            text/html:
              schema:
                type: string
  /ping:
    get:
      tags:
        - infrastructure
      summary: Server heartbeat operation
      description: >
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      operationId: getPing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pong"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
components:
  schemas:
    DocNode:
      type: object
      properties:
        kind:
          $ref: "#/components/schemas/DocNodeKind"
        jsDoc:
          $ref: "#/components/schemas/JsDoc"
    DocNodeArray:
      type: array
      items:
        $ref: "#/components/schemas/DocNode"
    DocNodeByEntry:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/DocNodeArray"
    DocNodeKind:
      type: string
      enum:
        - moduleDoc
        - function
        - variable
        - enum
        - class
        - typeAlias
        - namespace
        - interface
        - import
    DocPage:
      oneOf:
        - $ref: "#/components/schemas/DocPageSymbol"
        - $ref: "#/components/schemas/DocPageModule"
        - $ref: "#/components/schemas/DocPageIndex"
        - $ref: "#/components/schemas/DocPageFile"
        - $ref: "#/components/schemas/DocPageInvalidVersion"
        - $ref: "#/components/schemas/DocPagePathNotFound"
      discriminator:
        propertyName: kind
        mapping:
          symbol: "#/components/schemas/DocPageSymbol"
          module: "#/components/schemas/DocPageModule"
          index: "#/components/schemas/DocPageIndex"
          file: "#/components/schemas/DocPageFile"
          invalid-version: "#/components/schemas/DocPageInvalidVersion"
          notfound: "#/components/schemas/DocPagePathNotFound"
    DocPageBase:
      type: object
      properties:
        kind:
          type: string
          example: index
        module:
          $ref: "#/components/schemas/ModuleName"
        description:
          type: string
          example: A module for Deno
        version:
          type: string
          example: "0.148.0"
        path:
          type: string
          example: "/mod.ts"
        versions:
          type: array
          items:
            type: string
          example: ["0.146.0", "0.147.0", "0.148.0"]
        latest_version:
          type: string
          example: "0.148.0"
        uploaded_at:
          type: string
          format: date-time
          example: 2022-05-06T01:03:14.774Z
        upload_options:
          $ref: "#/components/schemas/UploadOptions"
        star_count:
          type: number
          example: 2406
      required:
        - "kind"
        - "module"
        - "version"
        - "path"
        - "versions"
        - "latest_version"
        - "uploaded_at"
        - "upload_options"
    DocPageDirItem:
      type: object
      properties:
        kind:
          type: string
          example: dir
        path:
          type: string
          example: "/"
      required:
        - "kind"
        - "path"
    DocPageFile:
      allOf:
        - $ref: "#/components/schemas/DocPageBase"
    DocPageIndex:
      allOf:
        - $ref: "#/components/schemas/DocPageBase"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/IndexItem"
          required:
            - "items"
    DocPageInvalidVersion:
      type: object
      properties:
        kind:
          type: string
          example: "invalid-version"
        module:
          $ref: "#/components/schemas/ModuleName"
        description:
          type: string
          example: A module for Deno
        versions:
          type: array
          items:
            type: string
          example: ["0.146.0", "0.147.0", "0.148.0"]
        latest_version:
          type: string
          example: "0.148.0"
    DocPageModule:
      allOf:
        - $ref: "#/components/schemas/DocPageBase"
        - type: object
          properties:
            nav:
              type: array
              items:
                $ref: "#/components/schemas/DocPageNavItem"
            docNodes:
              $ref: "#/components/schemas/DocNodeArray"
          required:
            - "nav"
            - "docNodes"
    DocPageModuleItem:
      type: object
      properties:
        kind:
          type: string
          example: module
        path:
          type: string
          example: "/mod.ts"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SymbolItem"
      required:
        - "kind"
        - "path"
        - "items"
    DocPageNavItem:
      oneOf:
        - $ref: "#/components/schemas/DocPageDirItem"
        - $ref: "#/components/schemas/DocPageModuleItem"
      discriminator:
        propertyName: kind
        mapping:
          dir: "#/components/schemas/DocPageDirItem"
          module: "#/components/schemas/DocPageModuleItem"
    DocPagePathNotFound:
      allOf:
        - $ref: "#/components/schemas/DocPageBase"
    DocPageSymbol:
      allOf:
        - $ref: "#/components/schemas/DocPageBase"
        - type: object
          properties:
            nav:
              type: array
              items:
                $ref: "#/components/schemas/DocPageNavItem"
            name:
              type: string
              example: "AClass"
            docNodes:
              $ref: "#/components/schemas/DocNodeArray"
          required:
            - "nav"
            - "name"
            - "docNodes"
    File:
      type: object
      properties:
        path:
          type: string
          example: /mod.ts
        size:
          type: number
          format: int64
          example: 3454
        type:
          type: string
          enum:
            - file
            - dir
          example: file
        raw_url:
          type: string
          format: uri
          example: "https://api.deno.land/modules/oak/v10.0.1/raw/mod.ts"
    HttpError:
      type: object
      properties:
        status:
          type: number
          minimum: 400
          maximum: 599
          example: 400
        statusText:
          type: string
          example: Bad Request
        message:
          type: string
          example: Parameter "page" must be 1 or greater.
        stack:
          type: string
          example: BadRequestError - Parameter "page" must be 1 or greater.
      required:
        - status
        - statusText
        - message
    IndexItem:
      type: object
      properties:
        kind:
          type: string
          enum:
            - dir
            - module
            - file
        path:
          type: string
          example: "/mod.ts"
        size:
          type: number
          example: 563245
        ignored:
          type: boolean
        doc:
          type: string
          example: "Some documentation for item"
      required:
        - "kind"
        - "path"
        - "size"
        - "ignored"
    JsDoc:
      type: object
      properties:
        doc:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/JsDocTag"
    JsDocMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/JsDoc"
    JsDocTag:
      type: object
      properties:
        kind:
          type: string
          enum:
            - callback
            - constructor
            - deprecated
            - enum
            - example
            - extends
            - module
            - param
            - public
            - private
            - property
            - protected
            - readonly
            - return
            - template
            - this
            - typedef
            - type
            - unsupported
    LegacyIndex:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ModuleName"
        description:
          type: string
          nullable: true
          example: A middleware framework for Deno
        star_count:
          type: number
          example: 4567
        version:
          type: string
          example: v10.0.1
        uploaded_at:
          type: string
          format: date-time
          example: 2022-05-06T01:03:14.774Z
        upload_options:
          $ref: "#/components/schemas/UploadOptions"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
      required:
        - "name"
        - "description"
        - "version"
        - "uploaded_at"
        - "upload_options"
        - "files"
    Module:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ModuleName"
        description:
          type: string
          nullable: true
          example: A middleware framework for Deno
        latest_version:
          type: string
          nullable: true
          example: v10.0.1
        star_count:
          type: number
          example: 4567
        versions:
          type: array
          items:
            type: string
          example: ["v10.0.0", "v10.0.1"]
      required:
        - name
        - description
        - latest_version
        - versions
      description: Representation of a module
    ModuleMetricList:
      allOf:
        - $ref: "#/components/schemas/ListBase"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ModuleMetrics"
    ModuleList:
      allOf:
        - $ref: "#/components/schemas/ListBase"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Module"
    ModuleMetrics:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ModuleName"
        updated:
          type: string
          format: date-time
        maintenance:
          type: object
        popularity:
          type: object
          properties:
            sessions_30_day:
              type: number
              format: integer
              example: 4792
          required:
            - "session_30_day"
        quality:
          type: object
      required:
        - "name"
        - "updated"
        - "maintenance"
        - "popularity"
        - "quality"
    ModuleName:
      type: string
      pattern: "^[A-Za-z_]{3,}$"
      example: oak
    ModuleVersion:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ModuleName"
        description:
          type: string
          nullable: true
          example: A middleware framework for Deno
        version:
          type: string
          example: v10.0.1
        uploaded_at:
          type: string
          format: date-time
          example: 2022-05-06T01:03:14.774Z
        upload_options:
          $ref: "#/components/schemas/UploadOptions"
    PublishEvent:
      type: object
      properties:
        event:
          type: string
          example: create
        module:
          type: string
          example: oak
        version:
          type: string
          example: all
      required:
        - event
        - module
        - version
    IndexDoc:
      type: object
      properties:
        index:
          $ref: "#/components/schemas/IndexMap"
        docs:
          $ref: "#/components/schemas/JsDocMap"
      required:
        - "index"
        - "docs"
    IndexMap:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
      example:
        /: ["/mod.ts"]
        /src: ["/src/lib.ts", "/src/util.js"]
    ListBase:
      type: object
      properties:
        next:
          type: string
          example: /modules?limit=100&page=3
        previous:
          type: string
          example: /modules?limit=100&page=1
    SymbolIndex:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SymbolIndexItem"
      required:
        - "items"
    SymbolIndexItem:
      type: object
      properties:
        path:
          type: string
          example: /mod.ts
        kind:
          type: string
          enum:
            - "dir"
            - "module"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SymbolItem"
      required:
        - "path"
        - "kind"
    SymbolItem:
      type: object
      properties:
        name:
          type: string
          example: Example
        kind:
          $ref: "#/components/schemas/DocNodeKind"
        jsDoc:
          $ref: "#/components/schemas/JsDoc"
      required:
        - "name"
        - "kind"
    UploadOptions:
      type: object
      properties:
        type:
          type: string
          example: github
        repository:
          type: string
          example: oakserver/oak
        ref:
          type: string
          example: v10.0.1
        subdir:
          type: string
          example: /deno
      required:
        - type
        - repository
        - ref
    WebhookResponse:
      type: object
      properties:
        result:
          type: string
          example: enqueued
        id:
          type: number
          example: 1
    pong:
      type: object
      properties:
        pong:
          type: boolean
